openapi: 3.0.3
info:
  title: CMAP Row Count API - Selection-Driven Enhancement
  description: |
    Enhanced row count API for the CMAP multi-dataset download feature that supports
    selection-driven optimization, batched requests, and cancellation capabilities.

    This API extends the existing `/api/data/bulk-download-row-counts` endpoint to
    support the new selection-driven row count optimization while maintaining
    backward compatibility with the existing multi-dataset download feature.
  version: 1.0.0
  contact:
    name: CMAP Development Team

servers:
  - url: /api/data
    description: Local development server
  - url: https://{hostname}/api/data
    description: Production server
    variables:
      hostname:
        default: simonscmap.com

paths:
  /bulk-download-row-counts:
    post:
      summary: Calculate row counts for selected datasets
      description: |
        Calculates filtered row counts for specified datasets. Enhanced to support
        batched requests for selected datasets only, with cancellation support.

        **Selection-Driven Behavior:**
        - Only calculates counts for datasets in the `shortNames` array
        - Supports batching multiple datasets in a single request
        - Implements request cancellation via standard HTTP mechanisms
        - Maintains backward compatibility with existing implementations

      operationId: calculateRowCounts
      tags:
        - Row Count Calculation

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RowCountRequest'
            examples:
              single_dataset:
                summary: Single dataset request
                value:
                  shortNames: ['dataset_1']
                  filters:
                    spatial:
                      lat: [32.5, 34.0]
                      lon: [-120.0, -118.5]
                    temporal:
                      start: '2020-01-01'
                      end: '2020-12-31'

              batched_selection:
                summary: Batched request for multiple selected datasets
                value:
                  shortNames: ['dataset_1', 'dataset_2', 'dataset_3']
                  filters:
                    spatial:
                      lat: [32.5, 34.0]
                      lon: [-120.0, -118.5]
                    temporal:
                      start: '2020-01-01'
                      end: '2020-12-31'
                    depth: [0, 100]

              no_filters:
                summary: Request without filters (returns unfiltered counts)
                value:
                  shortNames: ['dataset_1', 'dataset_2']

      responses:
        '200':
          description: Row counts calculated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RowCountResponse'
              examples:
                success:
                  summary: Successful row count calculation
                  value:
                    dataset_1: 15750
                    dataset_2: 8932
                    dataset_3: 0

        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_filters:
                  summary: Invalid filter parameters
                  value:
                    error: 'validation_error'
                    message: 'Invalid spatial bounds: latitude must be between -90 and 90'
                    details:
                      field: 'filters.spatial.lat'
                      value: [91.0, 95.0]

                missing_datasets:
                  summary: Missing or empty shortNames
                  value:
                    error: 'validation_error'
                    message: 'shortNames array is required and must not be empty'
                    details:
                      field: 'shortNames'
                      value: []

        '404':
          description: One or more datasets not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                dataset_not_found:
                  summary: Dataset not found
                  value:
                    error: 'dataset_not_found'
                    message: 'One or more datasets could not be found'
                    details:
                      missing_datasets: ['invalid_dataset_name']
                      found_datasets: ['dataset_1', 'dataset_2']

        '499':
          description: Request cancelled by client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                cancelled:
                  summary: Request cancelled
                  value:
                    error: 'request_cancelled'
                    message: 'Request was cancelled by client'

        '500':
          description: Internal server error during calculation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                calculation_error:
                  summary: Row count calculation failed
                  value:
                    error: 'calculation_error'
                    message: 'Failed to calculate row counts for one or more datasets'
                    details:
                      failed_datasets: ['dataset_2']
                      successful_datasets: ['dataset_1']

        '503':
          description: Service temporarily unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                service_unavailable:
                  summary: Database unavailable
                  value:
                    error: 'service_unavailable'
                    message: 'Row count calculation service is temporarily unavailable'

components:
  schemas:
    RowCountRequest:
      type: object
      required:
        - shortNames
      properties:
        shortNames:
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z0-9_-]+$'
          minItems: 1
          maxItems: 50
          description: |
            Array of dataset short names to calculate row counts for.
            Limited to 50 datasets per request for performance.
          example: ['dataset_1', 'dataset_2']

        filters:
          $ref: '#/components/schemas/FilterState'

        requestId:
          type: string
          pattern: '^[a-zA-Z0-9-]{8,36}$'
          description: |
            Optional client-generated request ID for tracking and cancellation.
            If not provided, server will generate one.
          example: 'req-abc123-def456'

        priority:
          type: string
          enum: [normal, high]
          default: normal
          description: |
            Request priority level. High priority requests are processed first.
            Used for immediate user-driven actions vs. background updates.

    FilterState:
      type: object
      description: |
        Filter parameters for row count calculation. All filters are optional.
        When no filters are provided, returns unfiltered row counts.
      properties:
        spatial:
          $ref: '#/components/schemas/SpatialFilter'
        temporal:
          $ref: '#/components/schemas/TemporalFilter'
        depth:
          $ref: '#/components/schemas/DepthFilter'

    SpatialFilter:
      type: object
      description: Spatial bounding box filter
      properties:
        lat:
          type: array
          items:
            type: number
            minimum: -90
            maximum: 90
          minItems: 2
          maxItems: 2
          description: 'Latitude range [min, max] in decimal degrees'
          example: [32.5, 34.0]

        lon:
          type: array
          items:
            type: number
            minimum: -180
            maximum: 180
          minItems: 2
          maxItems: 2
          description: 'Longitude range [min, max] in decimal degrees'
          example: [-120.0, -118.5]

      required: [lat, lon]

    TemporalFilter:
      type: object
      description: Temporal range filter
      properties:
        start:
          type: string
          format: date
          description: 'Start date in ISO 8601 format (YYYY-MM-DD)'
          example: '2020-01-01'

        end:
          type: string
          format: date
          description: 'End date in ISO 8601 format (YYYY-MM-DD)'
          example: '2020-12-31'

      required: [start, end]

    DepthFilter:
      type: object
      description: Depth range filter
      oneOf:
        - type: array
          items:
            type: number
            minimum: 0
          minItems: 2
          maxItems: 2
          description: 'Depth range [min, max] in meters'
          example: [0, 100]

        - type: number
          minimum: 0
          description: 'Single depth value in meters'
          example: 50

    RowCountResponse:
      type: object
      additionalProperties:
        type: integer
        minimum: 0
        description: 'Row count for the dataset'
      description: |
        Map of dataset short names to their calculated row counts.
        Returns 0 for datasets with no matching data.
      example:
        dataset_1: 15750
        dataset_2: 8932
        dataset_3: 0

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          enum:
            - validation_error
            - dataset_not_found
            - request_cancelled
            - calculation_error
            - service_unavailable
          description: 'Categorized error type for programmatic handling'

        message:
          type: string
          description: 'Human-readable error message'
          example: 'Invalid spatial bounds: latitude must be between -90 and 90'

        details:
          type: object
          description: 'Additional error context and debugging information'
          additionalProperties: true
          example:
            field: 'filters.spatial.lat'
            value: [91.0, 95.0]

        requestId:
          type: string
          description: 'Request ID for tracking and support'
          example: 'req-abc123-def456'

# API Contract Extensions for Selection-Driven Optimization

x-selection-driven-behavior:
  description: |
    This API contract supports the following selection-driven optimizations:

    1. **Batched Requests**: Multiple dataset row counts can be requested in a single call
    2. **Request Cancellation**: Clients can cancel in-flight requests via AbortController
    3. **Validation**: Comprehensive input validation with detailed error responses
    4. **Performance Limits**: Maximum 50 datasets per request to maintain performance
    5. **Priority Handling**: Support for high-priority requests (user-initiated actions)

x-backward-compatibility:
  description: |
    This enhanced API maintains full backward compatibility with the existing
    `/api/data/bulk-download-row-counts` endpoint:

    - Existing request format remains valid
    - Response format unchanged
    - Error handling enhanced but compatible
    - New optional fields (requestId, priority) don't break existing clients

x-cancellation-behavior:
  description: |
    Request cancellation support:

    - Clients should use AbortController.signal in fetch requests
    - Server will return 499 status code for cancelled requests
    - In-flight database queries will be terminated when possible
    - Partial results are not returned for cancelled requests

x-performance-considerations:
  description: |
    Performance optimization features:

    - Maximum 50 datasets per request to prevent timeouts
    - High-priority requests are processed before normal priority
    - Database query optimization for selected datasets only
    - Response caching for identical filter + dataset combinations
    - Connection pooling for concurrent requests

x-filter-validation:
  description: |
    Enhanced filter validation:

    - Spatial bounds validated against dataset coverage areas
    - Temporal ranges validated against dataset time coverage
    - Depth ranges validated against dataset depth profiles
    - Cross-filter validation for logical consistency
    - Detailed error messages for client-side correction
